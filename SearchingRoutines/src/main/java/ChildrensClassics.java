/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.*;
import java.io.*;
/**
 *
 * @author Cieran
 */
public class ChildrensClassics extends javax.swing.JFrame {

    /**
     * Creates new form ChildrensClassics
     */
    
    //Global Variable Declaration
    
    //ArrayList for the initial reading of the test file
    ArrayList<String> words = new ArrayList<String>();
    ArrayList<Integer> numbers = new ArrayList<Integer>();
    
    
    Integer[] refNumbers = null;
    String[] titles = null;
    
    //Declaration of BufferedReader
    BufferedReader br = null;
    
    public ChildrensClassics() {
        initComponents();
        //Tries to read all the information from the text file line by line
        try
        {
            //Declares the BufferedReader and the file it is reading
            br = new BufferedReader(new FileReader("BookList.txt"));
            
            //String word will hold the titles of the books as we pull them from the file.
            //String number holds the reference numbers, we parseInt to get integers instead of Strings.
            String word;
            String number;
            
            //Sets x to be the current line as long as the line isn't empty
            //If the line is empty, you've reached the end so stop the loop
            //number is equal to br.readLine first because the first line of the
            //text document is the reference number, not the title.
            while ((number = br.readLine()) != null)
            {
                //Parse the integer and send it to our ArrayList
                numbers.add(Integer.parseInt(number));
                
                //Read the next line which is the title and send it to the words ArrayList
                word = br.readLine();
                words.add(word);
            }
        }
        //This catch is required for the reading
        catch(IOException e){e.printStackTrace();}
        //no matter what, try or catch, the finally section is run.
        finally{
            //Tries to close the reader
            try{br.close();}
            //Catch in case the reader was never opened
            catch(IOException ex) {ex.printStackTrace();}
        }
        //Make the size of your refNumbers array equal to the size of the numbers ArrayList
        //Then use .toArray() to send all values from numbers to refNumbers
        refNumbers = new Integer[numbers.size()];
        numbers.toArray(refNumbers);
        
        //Make the size of your titles array equal to the size of the words ArrayList
        //Then use .toArray() to send all values from words to titles
        titles = new String[words.size()];
        words.toArray(titles);
        
        //Empty the error label, you could make it null text in the design but I
        //like to be able to see all my elements.
        errorLabel.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        requestLabel = new javax.swing.JLabel();
        input = new javax.swing.JTextField();
        outLabel1 = new javax.swing.JLabel();
        outLabel2 = new javax.swing.JLabel();
        linearOutput = new javax.swing.JTextField();
        binaryOutput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 0, 153));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Children's Classics");

        infoLabel.setForeground(new java.awt.Color(0, 102, 102));
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Please enter the library reference number of the desired book.");
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        infoLabel.setAutoscrolls(true);

        requestLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        requestLabel.setForeground(new java.awt.Color(153, 0, 0));
        requestLabel.setText("Library Reference Number:");

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        outLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        outLabel1.setText("Linear Search Result:");

        outLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        outLabel2.setText("Binary Search Result:");

        linearOutput.setEditable(false);
        linearOutput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        binaryOutput.setEditable(false);
        binaryOutput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("Error Label, Set Blank on Start");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(requestLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(searchButton)))
                        .addGap(0, 67, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(outLabel2)
                                    .addComponent(outLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(linearOutput)
                                    .addComponent(binaryOutput)))
                            .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestLabel)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outLabel1)
                    .addComponent(linearOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outLabel2)
                    .addComponent(binaryOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorLabel)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        //Linear Search
        //Used to set off the error label if you don't find the book
        boolean linear = false;
        
        //This integer is used to call the element number of the book title from
        //the array
        int linFind = 0;
        
        //Searches through every book in the title array for a matching name.
        for (int i = 0; i < titles.length; i++)
        {
            //If you find the name, set the linear boolean to true and set the
            //Value of the linfind variable to the element number of the title.
            if (Integer.parseInt(input.getText()) == refNumbers[i]) 
            {
                linear = true;
                linFind = i;
            }
        }
        
        //If you found a book with the proper reference number, output the title.
        if (linear == true)
        {
            linearOutput.setText(titles[linFind]);
        }
        else
        {
            //If you didn't find the book, display that adn empty the output label
            errorLabel.setText("Book Not Found!");
            linearOutput.setText("");
        }
        
        //Binary Search
        //Call on the recursive binary search function.
        /*
        Parameter 1:
            The list of integers
        Parameter 2:
            The element number of the lowest element, always 0.
        Parameter 3:
            The element number of the highest element, the length minus one because
            the array starts at 0 but length starts at 1. ( 1 - 1 = 0)
        Parameter 4:
            The number you are looking for within the list
        */
        int search = binarySearch(refNumbers, 0, refNumbers.length - 1, Integer.parseInt(input.getText()));
        
        //If the returned value is larger than -1, the assigned value, then
        //display the title of the book
        if (search >= 0)
        {
            //Set text if you found the element value.
            binaryOutput.setText(titles[search]);
        }
        else
        {
            //Report error if unfoud and set output to null.
            binaryOutput.setText("");
            errorLabel.setText("Book Not Found!");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    
    public int binarySearch(Integer [ ] A, int left, int right, int V){
        //Variable declaration 
        int middle;
        
        //If you've reached an exact point and increasing the middle causes this
        //error, then return a value less than one to trigger the errorlabel
        if (left > right) {
             return -1;
         }

        //Middle is the middle of the remaining value within the array
         middle = (left + right)/2;
         
         //If the element you are looking for is equal to the middle, great! Found it!
         // returns if you found the element
         if (V == A[middle]) {
             return middle;
         }
         //Divides the remaining elements in half depending on if the value you
         //are looking for is greater than or less than the current middle.
         if (V < A[middle]) {
             return binarySearch(A, left, middle-1, V);
         } else {
             return binarySearch(A, middle + 1, right, V);
         }
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChildrensClassics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChildrensClassics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChildrensClassics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChildrensClassics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChildrensClassics().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField binaryOutput;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JTextField input;
    private javax.swing.JTextField linearOutput;
    private javax.swing.JLabel outLabel1;
    private javax.swing.JLabel outLabel2;
    private javax.swing.JLabel requestLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
